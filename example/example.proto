syntax = "proto2";
package example;

import "mrpc/options.proto";

//option (mrpc.gen_cpp_reflection) = false;

enum Corpus
{
    CORPUS_UNSPECIFIED  = 0;
    CORPUS_UNIVERSAL    = 1;
    CORPUS_WEB          = 2;
    CORPUS_IMAGES       = 3;
    CORPUS_LOCAL        = 4;
    CORPUS_NEWS         = 5;
    CORPUS_PRODUCTS     = 6;
    CORPUS_VIDEO        = 7;
};

message ExampleInner
{
    optional int32      int32_value         = 1;
};

message Example
{
    optional int32      int32_value         = 1 [default = -2];
    optional uint32     uint32_value        = 2 [default = 1];
    optional sint32     sint32_value        = 3;
    optional fixed32    fixed32_value       = 4;
    optional sfixed32   sfixed32_value      = 5;

    optional int64      int64_value         = 6;
    optional uint64     uint64_value        = 7 [default = 1099511627775];
    optional sint64     sint64_value        = 8;
    optional fixed64    fixed64_value       = 9;
    optional sfixed64   sfixed64_value      = 10;

    optional float      float_value         = 11 [default = 1.0];
    optional double     double_value        = 12;
    optional bool       bool_value          = 13 [default = true];
    optional Corpus     enum_value          = 14 [default = CORPUS_VIDEO];
    optional string     string_value        = 15 [default = "abc"];
    optional bytes      bytes_value         = 16;
    optional ExampleInner obj_value         = 17;

    repeated int32      int32_repeat        = 31 [packed = true, (mrpc.cpp_type) = CPPTYPE_LIST];
    repeated uint32     uint32_repeat       = 32 [packed = true];
    repeated sint32     sint32_repeat       = 33 [packed = true];
    repeated fixed32    fixed32_repeat      = 34 [packed = true];
    repeated sfixed32   sfixed32_repeat     = 35 [packed = true];

    repeated int64      int64_repeat        = 36 [packed = true];
    repeated uint64     uint64_repeat       = 37 [packed = true];
    repeated sint64     sint64_repeat       = 38 [packed = true];
    repeated fixed64    fixed64_repeat      = 39 [packed = true];
    repeated sfixed64   sfixed64_repeat     = 40 [packed = true];

    repeated float      float_repeat        = 41 [packed = true];
    repeated double     double_repeat       = 42 [packed = true];
    repeated bool       bool_repeat         = 43 [packed = true, (mrpc.cpp_type) = CPPTYPE_LIST];
    repeated Corpus     enum_repeat      = 44 [packed = true];
    repeated string     string_repeat       = 45;
    repeated bytes      bytes_repeat        = 46;
    repeated ExampleInner obj_repeat        = 47;

    map<sint32, sint32> map_i2i             = 61 [(mrpc.cpp_type) = CPPTYPE_UNORDERED_MAP];
    map<sint32, Corpus> map_i2e             = 62;
    // Key in map fields cannot be enum types.
    // map<common.Corpus, int32> map_e2i       = 63;
    map<string, uint32> map_s2u             = 64;
    map<uint32, string> map_u2s             = 65;
    map<string, string> map_s2s             = 66 [(mrpc.cpp_type) = CPPTYPE_UNORDERED_MAP];
    map<sint32, ExampleInner> map_i2o       = 67;
    map<string, ExampleInner> map_s2o       = 68;
    map<bool, uint32> map_b2u               = 69;
};
